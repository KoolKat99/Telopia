== Method

=== Architecture Design

The application will follow the Model-View-Controller (MVC) design pattern to ensure a well-organized and maintainable codebase. The key components are as follows:

[plantuml, architecture]
----
@startuml
package "View (Qt)" {
    class NotepadWindow {
        -QTabWidget tabs
        -QTextEdit textEdit
        -QLabel imageLabel
        +show()
        +displayDocument(document: Document)
        +getUserInput(): InputEvent
    }
}

package "Model" {
    class Document {
        -std::string text
        -std::vector<Image> images
        +load(filePath: string)
        +save(filePath: string)
        +addImage(image: Image)
        +getText(): string
    }
}

package "Controller" {
    class NotepadController {
        -NotepadWindow view
        -Document model
        +handleUserAction(event: InputEvent)
        +updateView()
    }
}

NotepadWindow --> NotepadController
NotepadController --> Document
@enduml
----

=== Component Descriptions

==== View (Qt)
- **NotepadWindow**: Main window class handling the user interface. Uses Qt widgets like QTabWidget for tabs, QTextEdit for text editing, and QLabel for displaying images.

==== Model
- **Document**: Manages document data including text and embedded images. Handles file I/O operations.

==== Controller
- **NotepadController**: Manages interactions between the View and the Model. Processes user inputs and updates the Model and View accordingly.

=== Libraries and Tools

- **Qt**: For creating the GUI.
- **Standard C++ Libraries**: For file I/O and data management.
- **pytest**: For writing and running tests in Python.

=== Implementation Details

1. **Setting up the Environment**:
    - Install Qt and set up the development environment.
    - Set up a Python environment with pytest for testing.

2. **Developing the View**:
    - Create the main window with a tabbed interface.
    - Implement text editing and image display functionalities.

3. **Developing the Model**:
    - Implement the Document class for managing text and images.
    - Add methods for loading and saving documents.

4. **Developing the Controller**:
    - Implement the NotepadController to handle user actions and update the Model and View.

5. **Writing Tests**:
    - Write tests for the Document class in Python using pytest.
    - Ensure comprehensive coverage of file operations and data manipulations.

== Implementation
